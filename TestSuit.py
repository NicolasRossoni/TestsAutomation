"""
================================================================================
--- Este arquivo implementa testes automatizados para o fluxo de cria√ß√£o de assinaturas
    na plataforma, utilizando Selenium WebDriver e o padr√£o Page Object Model.

--- Estrutura principal:
    1. TestLogin: Classe de teste que herda de unittest.TestCase e cont√©m:
       - setUp(): Configura o ambiente de teste, faz login e navega at√© a √°rea de cria√ß√£o
       - verificar_criacao_assinatura(): M√©todo central que cria e verifica assinaturas
       - test_venda_mais_sem_asaas(): Teste espec√≠fico para cria√ß√£o sem integra√ß√£o Asaas
       - tearDown(): Limpa o ambiente ap√≥s cada teste

--- O teste monitora as requisi√ß√µes HTTP para verificar se a cria√ß√£o foi bem-sucedida,
    buscando por chamadas √† API que contenham 'subscription' na URL.

--- Outros testes comentados ao final permitem verificar diferentes tipos de assinatura
    (Standard, Profissional) e diferentes configura√ß√µes (com/sem integra√ß√£o Asaas).
================================================================================
"""
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from seleniumwire import webdriver
from auxiliar import logger
from time import sleep, time
import unittest
import Pages
import json
from pprint import pprint

# Lista de assinaturas dispon√≠veis no sistema
nomes_de_assinaturas = ["Venda+", "Standard", "Professional", "Chile", "Portugal", "Telecom"]

# Classe de teste para o fluxo de login e cria√ß√£o de assinaturas
class TestLogin(unittest.TestCase):
    # M√©todo executado antes de cada teste para configurar o ambiente
    def setUp(self):
        logger.debug("üõ†Ô∏è Configurando ambiente para o teste")

        # Configura as op√ß√µes do navegador Chrome
        self.options = Options()
        #self.options.add_argument("--headless")
        self.options.add_argument("--start-maximized")
        self.service = Service("drivers/chromedriver")
        self.driver = webdriver.Chrome(service=self.service, options=self.options)

        # Acessa a URL da plataforma
        self.driver.get("https://platform.ecotx.dev/")
        
        # Inicializa as p√°ginas que ser√£o utilizadas nos testes
        self.login_page = Pages.LoginPage(self.driver)
        self.web_page = Pages.MainWebPage(self.driver)
        self.backoffice = Pages.Backoffice(self.driver)
        self.backoffice_criar_assinatura = Pages.BackofficeCriarAssinatura(self.driver)

        # Efetua login na plataforma
        self.login_page.preencher_usuario("nicolas.o.rossoni@gmail.com")
        self.login_page.preencher_senha("123456")
        self.login_page.clicar_login()
        self.login_page.aguardar_carregar()
        
        # Navega at√© a √°rea de cria√ß√£o de assinaturas no backoffice
        self.web_page.trocar_org("Vigilant")
        self.web_page.trocar_area("Backoffice")
        self.driver.switch_to.window(self.driver.window_handles[-1])
        self.backoffice.aguardar_carregar() 
        self.backoffice.trocar_area("Gerenciamento de Assinaturas")
        self.backoffice.trocar_sub_area("Criar nova assinatura")

    # M√©todo para verificar a cria√ß√£o de uma assinatura
    def verificar_criacao_assinatura(self, tipo_assinatura, com_asaas):
        max_wait_time = 120
        start_time = time()
        
        # Cria a assinatura para um usu√°rio existente
        acessos, cobran√ßa_no_asaas, chave_da_assinatura = self.backoffice_criar_assinatura.criar_assinatura_usuario_existente(tipo_assinatura, com_asaas)
        
        # Verifica se a requisi√ß√£o foi bem sucedida dentro do tempo limite
        while time() - start_time < max_wait_time:
            # Percorre todas as requisi√ß√µes feitas pelo navegador
            for request in self.driver.requests:
                # Verifica se √© uma requisi√ß√£o relacionada a assinaturas e se tem resposta
                if 'subscription' in request.url and request.response:
                    # Verifica se a resposta n√£o foi bem sucedida (status diferente de 200)
                    if request.response.status_code != 200:
                        logger.error(f"‚ùå Erro: A requisi√ß√£o teve status {request.response.status_code}")
                        print("\n=== RESPOSTA DA API ===")
                        pprint(json.loads(request.response.body.decode('utf-8')))  # Exibe formatado de forma leg√≠vel
                        print("======================\n")
                        self.fail(f"Erro na requisi√ß√£o para {tipo_assinatura}: Status {request.response.status_code}")
                        
                    logger.info(f"‚úÖ Assinatura criada para o acesso '{acessos}' com cobran√ßa no Asaas[{cobran√ßa_no_asaas}] e chave = {chave_da_assinatura}.")
                    return
            sleep(2)  
        
        # Se o tempo expirar sem encontrar a requisi√ß√£o esperada, o teste falha
        self.fail(f"Timeout: Nenhuma requisi√ß√£o para subscription foi detectada em {max_wait_time} segundos")
    
    """
    # Teste para criar assinatura do tipo Venda+, Standard e Profissional sem integra√ß√£o com Asaas
    def test_venda_mais_sem_asaas(self):
        self.verificar_criacao_assinatura("Venda+", False)

    def test_standard_sem_asaas(self):
        self.verificar_criacao_assinatura("Standard", False)
        
    def test_professional_sem_asaas(self):
        self.verificar_criacao_assinatura("Professional", False)
    """
    
    # Teste para criar assinatura do tipo Venda+, Standard e Profissional com integra√ß√£o com Asaas
    def test_venda_mais_com_asaas(self):
        self.verificar_criacao_assinatura("Venda+", True)
        
    """   
    def test_standard_com_asaas(self):
        self.verificar_criacao_assinatura("Standard", True)
        
    def test_professional_com_asaas(self):
        self.verificar_criacao_assinatura("Professional", True)
    """
    
    # M√©todo executado ap√≥s cada teste para limpar o ambiente
    def tearDown(self):
        self.driver.quit()
        logger.debug("üîÑ Ambiente zerado ap√≥s o teste.")

if __name__ == "__main__":
    unittest.main()

# Para rodar e gerar relat√≥rio:
# pytest TestSuit.py -n auto --html=TestSuit_report.html